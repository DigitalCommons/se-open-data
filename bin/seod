#!/usr/bin/env ruby

# This manages the data in an open-data project
#
# "seod" stands for "Solidarity Economy Open Data"
#
# FIXME expand
#
# FIXME dynamically generate documentation from SeOpenData::Cli reflection

require_relative '../lib/load_path'
require 'se_open_data/cli'
require 'optparse'

seod = File.basename(__FILE__)
commands = SeOpenData::Cli.public_methods.filter do |method|
  method.start_with? 'command_'
end.map do |method|
  method[8..]
end.sort

def class_var(name)
  var = "@@#{name}"
  if SeOpenData::Cli.class_variable_defined? var
    SeOpenData::Cli.class_variable_get var
  else
    nil
  end
end

usage = <<USAGE
usage:
   #{seod} <command>

Where <command> can be:

#{commands.map {|c| "- #{c}: #{class_var('command_'+c+'_desc') || ''}"}.join("\n")}
- help: print this help

The operation of this script is configured by one or more
configuration files, and by appropriately named scripts, both located
in the current directory from which this command is run.

The environment variable `SEOD_CONFIG` can be defined to name the
config file which `#{seod}` should use. If it is not set, `local.conf`
is used. Use this for developer-specific configuration which should
not be checked into the source code.

The return code of `#{seod}` indicates whether these commands succeed
or not. A zero return code indicuates success, as usual for console
commands. A non-zero value indicates something else: typically
failure.

However, the download command may return the value 100 to indicate that
either there is no download script, or that it has determined there is
no new data to download. This is so that later steps can be skipped in
this case.

For more information, read the inline documentation in `#{seod}`, here:

    #{__FILE__}

See also documentation for the modules `SeOpenData::Config` and
`SeOpenData::Cli`.

USAGE

docs = <<DOCS
SCRIPTS:

There are currently two scripts which if defined are used to implement
case-specific logic, for the `download` and `convert` commands,
respectvely. The logic can be completely custom for each
case. However, whenever possible, it is recommended that they simply
invoke general routines from the SeOpenData::Cli module. See that for
more information.

- `downloader`: if present, it should update the original data
  file. It should return a status code of 0 on success, 100 to
  indicate there is no data to download, or any other value to
  indicate failure. May be absent, for instance because there is no
  automated update mechanism.
- `converter`: this must be present, and should convert the original
  data file into the `standard.csv` file, returning 0 on success, and
  anything else indicating an error.


CONFIGURATION:

By default, a the preferred configuration file is called `local.conf`,
indicating that it is purely local to the current working copy, with
hosts and other settings for the convenience of the
developer. Therefore, this should git-ignored, and not checked into
version control.

Specifically, `local.conf` is used if the environment variable
`SEOD_CONFIG` is empty or unset.

Typically, other configuration files are also present, and checked
into version control. These can be selected by setting the environment
variable `SEOD_CONFIG` to their filename before running `#{seod}`. The
usual ones are:

- `default.conf` should contain configuration used for development
  builds and deployment if the data, using the perspective of
  automated deployment of `open-data` on a development server.

- `staging.conf` should contain configuration use for production
  builds and deployment of the data, using the persective of automated
  deployment of `open-data` on a development server.

- `production.conf` should contain configuration use for production
  builds and deployment of the data, using the persective of automated
  deployment of `open-data` on a production server.

Notice that staging and production are similar in content. The
difference is that `staging.conf` typically deploys a *development*
branch in *production* mode, whereas `production.conf` deployes a
*production* branch in *production* mode.  Historically `staging.conf`
was used to deploy a new production server which was being vetted
before being used to replace the actual production server. Production
URIs are used in both cases, but different destinations are defined.

DOCS

# Parse the options
command, *rest = ARGV
abort usage unless command

params = []
options = {}
command_method = nil
begin
  # Note that the seod command option processing supplies options via
  # a hash, in which the behavior is deduced from introspecting the
  # corresponding method's parameters as follows:
  #
  # - The corresponding method is the class method in SeOpenData::Cli
  #   matching the command prefixed with 'command_'
  # - Method parameters which are required increment minimum and maximum
  #   non-option arguments expected on the command line
  # - Method parameters which are optional increment the maximum only
  # - Non-option command line parameters are supplied in order as strings, if these bounds are met
  # - Keyword method parameters that are required will be required in the commmand line,
  #   and get the argument as a string. An error will be triggered if they are absent.
  # - Keyword method parameters that are optional will be optional in the command line,
  #   and will get:
  #    - the argument as a string if it is supplied
  #    - a true value if the option is present with no argument
  #    - nil otherwise.
  #
  
  min_params = 0
  max_params = 0
  command_method = SeOpenData::Cli.public_methods.find do |sym|
    sym.to_s == "command_#{command}"
  end
  abort usage+docs if command == 'help'
  abort usage unless command_method

  params = SeOpenData::Cli.method(command_method).parameters
  param_docs = class_var "#{command_method}_param_docs"
  param_docs = {} unless param_docs.is_a? Hash

  # Options parser construction
  op = OptionParser.new do |opts|
    opts.program_name = seod

    params.each do |param|
      (type, name) = param
      next unless name # Ignore unnamed parameters

      lcname = name.to_s.downcase
      ucname = lcname.upcase
      case type
      when :keyreq
        opts.on("--#{lcname} #{ucname}", param_docs[name]) {|v| options[name] = v }
      when :key
        opts.on("--#{lcname} [#{ucname}]", param_docs[name]) do |v|
          options[name] = if v == nil
                            true
                          else
                            v
                          end
      when :req
        min_params += 1
        max_params += 1 if max_params >= 0
      when :opt
        max_params += 1 if max_params >= 0
      when :rest
        max_params = -1 # no limit
      else
        raise "unexpected: unsupported parameter type #{type} for #{name} "+
              "in command method SeOpenData::Cli.#{command_method}"
      end
    end

    opts.define_tail("-h", "--help", "print this help") do
      puts <<EOF
#{class_var("#{command_method}_desc") || ''}

Usage:

   #{seod} #{command} [options] [args]

Where [options] can be:

EOF
      puts opts.summarize
      puts

      case max_params
      when -1
        puts "And [args] can be any number of parameters, but at least #{min_params}."
      when 0
        puts "There are no arguments [args] allowed for this command"
      else
        if max_params == min_params
          puts "And [args] must be #{min_params} parameters."
        else
          puts "And [args] must be at minimum #{min_params}, at most #{max_params} parameters."
        end
      end

      puts
      puts class_var("#{command_method}_docs") || ''
      abort
    end
  end

  # This actually parses the options
  params = op.parse(rest)

  # Check the resulting parameters are in the right range
  raise "there must be at least #{min_params} parameters (given #{params.size})" unless
    params.size >= min_params
  raise "there must not be more than #{max_params} parameters (given #{params.size})" if
    max_params >= 0 && params.size > max_params

rescue => e
  abort "When invoking #{command}, #{e}\nCheck seod #{command} --help for guidance."
end

puts "invoking command: #{command_method} #{params.inspect} #{options.inspect}"
begin
  exit SeOpenData::Cli.send(command_method, *params, **options)
rescue => e
  warn e.message
  warn e.backtrace.join("\n")
  exit -1
end
